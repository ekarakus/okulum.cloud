{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ergun/OneDrive/Desktop/okulum.cloud/screen-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./cache.service\";\nexport let MockApiService = /*#__PURE__*/(() => {\n  class MockApiService {\n    constructor(http, cache) {\n      this.http = http;\n      this.cache = cache;\n      // Default API base - configurable via window.__API_BASE__ if needed\n      this.base = window.__API_BASE__ || 'http://localhost:3000/api';\n    }\n    // Notifications: use announcements as primary notifications\n    getNotifications() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const type = 'notifications';\n        try {\n          const res = yield _this.http.get(`${_this.base}/announcements`).toPromise();\n          yield _this.cache.set(undefined, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this.cache.get(undefined, type);\n          return cached || [];\n        }\n      })();\n    }\n    getAnnouncements() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const type = 'announcements';\n        try {\n          const res = yield _this2.http.get(`${_this2.base}/announcements`).toPromise();\n          yield _this2.cache.set(undefined, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this2.cache.get(undefined, type);\n          return cached || [];\n        }\n      })();\n    }\n    // School time table (may accept school_id query param in real API)\n    getSchedule(school_id) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const params = school_id ? new HttpParams().set('school_id', String(school_id)) : undefined;\n        const type = 'schedule';\n        try {\n          const res = yield _this3.http.get(`${_this3.base}/school-time-table`, {\n            params\n          }).toPromise();\n          yield _this3.cache.set(school_id, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this3.cache.get(school_id, type);\n          return cached;\n        }\n      })();\n    }\n    // Duty schedule\n    getDuty(school_id, shift) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        // call public duty schedule route\n        const params = school_id ? new HttpParams().set('shift', String(shift || 1)) : undefined;\n        const id = school_id ? String(school_id) : '';\n        const type = 'duty';\n        try {\n          const res = yield _this4.http.get(`${_this4.base}/public/duty-schedule/${encodeURIComponent(id)}`, {\n            params\n          }).toPromise();\n          yield _this4.cache.set(school_id, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this4.cache.get(school_id, type);\n          return cached;\n        }\n      })();\n    }\n    // Students list; supports optional school_id\n    getStudents(school_id) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const type = 'students';\n        const id = school_id ? String(school_id) : undefined;\n        try {\n          const res = school_id ? yield _this5.http.get(`${_this5.base}/public/students/school/${encodeURIComponent(String(school_id))}`).toPromise() : yield _this5.http.get(`${_this5.base}/students`).toPromise();\n          yield _this5.cache.set(school_id, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this5.cache.get(school_id, type);\n          return cached || [];\n        }\n      })();\n    }\n    getSchool(school_id) {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        const type = 'school';\n        try {\n          const res = yield _this6.http.get(`${_this6.base}/public/schools/id/${encodeURIComponent(String(school_id))}`).toPromise();\n          yield _this6.cache.set(school_id, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this6.cache.get(school_id, type);\n          return cached;\n        }\n      })();\n    }\n    // Resolve school by code using the new public endpoint\n    getSchoolByCode(code) {\n      var _this7 = this;\n      return _asyncToGenerator(function* () {\n        if (!code) return Promise.reject(new Error('code is required'));\n        const type = `schoolByCode:${code}`;\n        try {\n          const res = yield _this7.http.get(`${_this7.base}/public/schools/by-code/${encodeURIComponent(code)}`).toPromise();\n          // cache by resolved id as well as by code\n          if (res && res.id) yield _this7.cache.set(res.id, 'school', res);\n          yield _this7.cache.set(undefined, type, res);\n          return res;\n        } catch (err) {\n          const cached = yield _this7.cache.get(undefined, type);\n          return cached ? cached : Promise.reject(err);\n        }\n      })();\n    }\n    static {\n      this.ɵfac = function MockApiService_Factory(t) {\n        return new (t || MockApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CacheService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: MockApiService,\n        factory: MockApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MockApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}