{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ergun/OneDrive/Desktop/okulum.cloud/screen-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./mock-api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction KioskComponent_img_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 31);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.school.logoUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction KioskComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \\u015Eu anda \", (ctx_r1.schedule == null ? null : ctx_r1.schedule.current == null ? null : ctx_r1.schedule.current.period_name) || \"\\u2014\", \" teyiz \");\n  }\n}\nfunction KioskComponent_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" s\\u0131radaki \", (ctx_r2.schedule == null ? null : ctx_r2.schedule.current == null ? null : ctx_r2.schedule.current.period_name) || \"\\u2014\", \" \");\n  }\n}\nfunction KioskComponent_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1, \" Ders yok \");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction KioskComponent_div_12_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r13.formatTime(ctx_r13.schedule == null ? null : ctx_r13.schedule.next == null ? null : ctx_r13.schedule.next.start), \")\");\n  }\n}\nfunction KioskComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, KioskComponent_div_12_span_2_Template, 2, 1, \"span\", 33);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" s\\u0131radaki \", (ctx_r4.schedule == null ? null : ctx_r4.schedule.next == null ? null : ctx_r4.schedule.next.period_name) || \"\\u2014\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.schedule == null ? null : ctx_r4.schedule.next == null ? null : ctx_r4.schedule.next.start);\n  }\n}\nfunction KioskComponent_div_22_div_3_li_4_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 45);\n    i0.ɵɵtext(1, \"\\u2022 M\\u00FCd\\u00FCr Yard\\u0131mc\\u0131s\\u0131\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"administrator\": a0,\n    \"vice-principal\": a1\n  };\n};\nfunction KioskComponent_div_22_div_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 42)(1, \"span\", 43);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, KioskComponent_div_22_div_3_li_4_span_3_Template, 2, 0, \"span\", 44);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const assignment_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, !assignment_r17.duty_location, (assignment_r17.employee == null ? null : assignment_r17.employee.employee_type == null ? null : assignment_r17.employee.employee_type.is_vice_principal) && assignment_r17.duty_location));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate((assignment_r17.employee == null ? null : assignment_r17.employee.name) || \"\\u2014\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", assignment_r17.employee == null ? null : assignment_r17.employee.employee_type == null ? null : assignment_r17.employee.employee_type.is_vice_principal);\n  }\n}\nfunction KioskComponent_div_22_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38)(1, \"div\", 39);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\", 40);\n    i0.ɵɵtemplate(4, KioskComponent_div_22_div_3_li_4_Template, 4, 6, \"li\", 41);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(group_r15.location);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", group_r15.assignments);\n  }\n}\nfunction KioskComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35)(1, \"div\", 36);\n    i0.ɵɵtext(2, \"Bug\\u00FCn\\u00FCn N\\u00F6bet\\u00E7ileri\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, KioskComponent_div_22_div_3_Template, 5, 2, \"div\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.getFilteredDuty());\n  }\n}\nfunction KioskComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46)(1, \"span\", 47);\n    i0.ɵɵtext(2, \"\\uD83C\\uDF82\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Bug\\u00FCn Aram\\u0131za Kat\\u0131lan \", ctx_r6.birthdays.length, \" ki\\u015Fi var\");\n  }\n}\nfunction KioskComponent_div_25_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 50)(1, \"span\", 51);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 52);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r19.birthdays[ctx_r19.currentBirthdayIndex].first_name, \" \", ctx_r19.birthdays[ctx_r19.currentBirthdayIndex].last_name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r19.birthdays[ctx_r19.currentBirthdayIndex].class_name);\n  }\n}\nfunction KioskComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 48);\n    i0.ɵɵtemplate(1, KioskComponent_div_25_div_1_Template, 5, 3, \"div\", 49);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.birthdays[ctx_r7.currentBirthdayIndex]);\n  }\n}\nfunction KioskComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 53)(1, \"div\", 54);\n    i0.ɵɵtext(2, \"\\uD83C\\uDF88\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \"Bug\\u00FCn aram\\u0131za kat\\u0131lan kimse yok!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6, \"Yar\\u0131n yeni do\\u011Fum g\\u00FCnlerinde g\\u00F6r\\u00FC\\u015Fmek \\u00FCzere :)\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction KioskComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 55);\n    i0.ɵɵtext(1, \"Duyuru yok\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction KioskComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵelement(1, \"h2\", 57)(2, \"div\", 58);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const a_r20 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerText\", a_r20.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", a_r20.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction KioskComponent_button_38_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 59);\n    i0.ɵɵlistener(\"click\", function KioskComponent_button_38_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.enterFullscreen());\n    });\n    i0.ɵɵtext(1, \"\\u2B1C\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction KioskComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 60)(1, \"div\", 61)(2, \"div\", 62);\n    i0.ɵɵtext(3, \"\\uD83D\\uDD14\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h2\");\n    i0.ɵɵtext(5, \"Ders Ba\\u015Fl\\u0131yor! \\u0130yi Dersler.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\", 63);\n    i0.ɵɵtext(9, \"L\\u00FCtfen s\\u0131n\\u0131flar\\u0131n\\u0131za ge\\u00E7iniz\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\"Dersin ba\\u015Flamas\\u0131na \", ctx_r12.classTransitionCountdown, \" kald\\u0131\");\n  }\n}\nexport let KioskComponent = /*#__PURE__*/(() => {\n  class KioskComponent {\n    constructor(api, route) {\n      this.api = api;\n      this.route = route;\n      this.locale = 'tr'; // Varsayılan dil ve yerel ayar Türkçe\n      this.notifications = [];\n      this.schedule = null;\n      this.duty = null; // Re-enabled for duty schedule\n      this.announcements = [];\n      this.activeAnnouncements = [];\n      this.currentAnnouncementIndex = 0;\n      this.announcementTimerId = null;\n      this.birthdays = [];\n      this.currentBirthdayIndex = 0;\n      this.birthdayTimerId = null;\n      this.lastUpdated = new Date();\n      this.school = null;\n      this.now = new Date();\n      this.today = new Date();\n      this.nowText = '';\n      this.todayText = '';\n      this.weekdayText = '';\n      // Optional school scope - set this if you have a school id to query\n      this.schoolId = undefined;\n      // simulation\n      this.simActive = false;\n      // modal for class transition\n      this.showClassTransitionModal = false;\n      this.classTransitionCountdown = '';\n      // loading states\n      this.loading = {\n        notifications: false,\n        schedule: false,\n        duty: false,\n        announcements: false,\n        students: false,\n        school: false\n      };\n      // source markers (live|cache)\n      this.source = {\n        notifications: 'unknown',\n        schedule: 'unknown',\n        duty: 'unknown',\n        announcements: 'unknown',\n        students: 'unknown',\n        school: 'unknown'\n      };\n      // online status and fullscreen button visibility\n      this.isOnline = navigator.onLine;\n      this.showFullscreenButton = true;\n    }\n    ngOnInit() {\n      console.log('ngOnInit called');\n      // read runtime schoolId if provided\n      try {\n        const sid = window.__SCHOOL_ID__;\n        if (sid) this.schoolId = Number(sid);\n      } catch (e) {}\n      console.log('schoolId from config:', this.schoolId);\n      // If no numeric schoolId provided, try to resolve from first path segment (school code)\n      if (!this.schoolId) {\n        try {\n          const path = window.location.pathname || '/';\n          const seg = path.split('/').filter(Boolean)[0];\n          if (seg) {\n            // try resolving via public API\n            this.api.getSchoolByCode(seg).then(s => {\n              if (s && s.id) {\n                this.schoolId = Number(s.id);\n                this.school = s;\n                this.load();\n              } else {\n                // fallback: just load without school scope\n                this.load();\n              }\n            }).catch(() => {\n              this.load();\n            });\n            return; // load will be triggered after resolution\n          }\n        } catch (e) {/* ignore */}\n      }\n      this.load();\n      setInterval(() => this.load(), 30000); // refresh every 30s\n      // detect simulation param: window.__SIM_TIME__ or ?sim=... (accept ISO or Turkish-ish dates)\n      this.route.queryParams.subscribe(params => {\n        const simParam = window.__SIM_TIME__ || params['sim'];\n        if (simParam) {\n          const parsed = this.parseSimTime(String(simParam));\n          if (parsed) {\n            this.simActive = true;\n            this.simulatedNow = parsed;\n            this.now = new Date(this.simulatedNow);\n            this.today = new Date(this.simulatedNow);\n          }\n        }\n      });\n      // update clock every second; if simulation active, advance simulatedNow; else use real now\n      const tick = () => {\n        if (this.simActive && this.simulatedNow) {\n          this.simulatedNow = new Date(this.simulatedNow.getTime() + 1000);\n          this.now = new Date(this.simulatedNow);\n          this.today = new Date(this.simulatedNow);\n        } else {\n          this.now = new Date();\n          this.today = new Date();\n        }\n        // update human-readable strings to avoid relying on date pipe in template\n        try {\n          this.nowText = this.now.toLocaleTimeString('tr', {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          });\n          // Format: \"20 Ekim Pazartesi 2025\" (day Month Weekday year) with Turkish locale and capitalized names\n          try {\n            const dayNum = this.today.getDate();\n            const monthName = this.today.toLocaleString('tr', {\n              month: 'long'\n            });\n            const weekdayName = this.today.toLocaleString('tr', {\n              weekday: 'long'\n            });\n            const monthCap = monthName.charAt(0).toLocaleUpperCase('tr') + monthName.slice(1);\n            const weekdayCap = weekdayName.charAt(0).toLocaleUpperCase('tr') + weekdayName.slice(1);\n            this.todayText = `${dayNum} ${monthCap} ${weekdayCap}`;\n            this.weekdayText = weekdayCap;\n          } catch (e) {\n            this.todayText = this.today.toLocaleDateString('tr', {\n              day: '2-digit',\n              month: 'long',\n              year: 'numeric'\n            });\n            try {\n              this.weekdayText = this.today.toLocaleString('tr', {\n                weekday: 'long'\n              });\n            } catch (e) {\n              this.weekdayText = '';\n            }\n          }\n        } catch (e) {\n          this.nowText = '';\n          this.todayText = '';\n          this.weekdayText = '';\n        }\n        // recompute derived schedule values (current/next period and countdown) each tick so countdown updates live\n        try {\n          if (this.schedule) this.updateScheduleDerived(this.now);\n        } catch (e) {}\n        // Update modal countdown if modal is showing\n        if (this.showClassTransitionModal && this.schedule?.current && this.schedule.remainingMinutes < 1) {\n          const diffMs = this.schedule.current.end.getTime() - this.now.getTime();\n          this.classTransitionCountdown = this.formatTimeRemaining(diffMs);\n        }\n      };\n      tick();\n      setInterval(tick, 1000);\n      // Monitor online/offline status\n      window.addEventListener('online', () => this.isOnline = true);\n      window.addEventListener('offline', () => this.isOnline = false);\n      // Hide fullscreen button after 30 seconds\n      setTimeout(() => {\n        this.showFullscreenButton = false;\n      }, 30000);\n    }\n    ngOnDestroy() {\n      this.stopAnnouncementCarousel();\n      this.stopBirthdayCarousel();\n    }\n    load() {\n      console.log('load() called');\n      // fetch each dataset and track loading + cached/live source\n      this.loadNotifications();\n      this.loadSchedule();\n      this.loadDuty(); // Re-enabled for duty schedule\n      this.loadAnnouncements();\n      this.loadStudents();\n      // load school info if available\n      if (this.schoolId) {\n        this.loadSchool();\n      }\n    }\n    loadNotifications() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.loading.notifications = true;\n        _this.source.notifications = 'unknown';\n        try {\n          const notes = yield _this.api.getNotifications();\n          _this.notifications = notes || [];\n          _this.source.notifications = 'live';\n        } catch (e) {\n          // MockApiService already falls back to cache; if it returned data it will be assigned.\n          _this.source.notifications = 'cache';\n        } finally {\n          _this.loading.notifications = false;\n          _this.lastUpdated = new Date();\n        }\n      })();\n    }\n    loadSchedule() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        console.log('loadSchedule called with schoolId:', _this2.schoolId);\n        _this2.loading.schedule = true;\n        _this2.source.schedule = 'unknown';\n        try {\n          const sched = yield _this2.api.getSchedule(_this2.schoolId);\n          console.log('Schedule loaded:', sched);\n          if (sched) {\n            // API returns array directly, wrap it in object with lessons property\n            _this2.schedule = {\n              lessons: Array.isArray(sched) ? sched : []\n            };\n            _this2.source.schedule = 'live';\n          } else _this2.source.schedule = 'cache';\n        } catch (e) {\n          console.error('Schedule load error:', e);\n          _this2.source.schedule = 'cache';\n        } finally {\n          _this2.loading.schedule = false;\n          _this2.lastUpdated = new Date();\n          console.log('Schedule after load:', _this2.schedule);\n          if (_this2.schedule) {\n            console.log('Calling updateScheduleDerived...');\n            _this2.updateScheduleDerived(_this2.now);\n          } else {\n            console.log('No schedule data, skipping updateScheduleDerived');\n          }\n        }\n      })();\n    }\n    loadDuty() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        _this3.loading.duty = true;\n        _this3.source.duty = 'unknown';\n        try {\n          const d = yield _this3.api.getDuty(_this3.schoolId);\n          if (d) {\n            _this3.duty = d;\n            _this3.source.duty = 'live';\n          } else _this3.source.duty = 'cache';\n        } catch (e) {\n          _this3.source.duty = 'cache';\n        } finally {\n          _this3.loading.duty = false;\n          _this3.lastUpdated = new Date();\n        }\n      })();\n    }\n    loadAnnouncements() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        _this4.loading.announcements = true;\n        _this4.source.announcements = 'unknown';\n        try {\n          const a = yield _this4.api.getAnnouncements();\n          _this4.announcements = a || [];\n          _this4.source.announcements = 'live';\n          // compute active announcements based on schedule and simulated/real time\n          _this4.computeActiveAnnouncements();\n          _this4.startAnnouncementCarousel();\n        } catch (e) {\n          _this4.source.announcements = 'cache';\n        } finally {\n          _this4.loading.announcements = false;\n          _this4.lastUpdated = new Date();\n        }\n      })();\n    }\n    loadStudents() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        _this5.loading.students = true;\n        _this5.source.students = 'unknown';\n        try {\n          const students = (yield _this5.api.getStudents(_this5.schoolId)) || [];\n          const today = _this5.simActive && _this5.simulatedNow ? _this5.simulatedNow : new Date();\n          _this5.birthdays = (students || []).filter(s => {\n            try {\n              const d = new Date(s.birth_date);\n              return d.getDate() === today.getDate() && d.getMonth() === today.getMonth();\n            } catch (e) {\n              return false;\n            }\n          });\n          _this5.source.students = 'live';\n          // Reset carousel index and start birthday carousel if we have birthdays\n          _this5.currentBirthdayIndex = 0;\n          _this5.startBirthdayCarousel();\n        } catch (e) {\n          _this5.source.students = 'cache';\n        } finally {\n          _this5.loading.students = false;\n          _this5.lastUpdated = new Date();\n        }\n      })();\n    }\n    loadSchool() {\n      var _this6 = this;\n      return _asyncToGenerator(function* () {\n        _this6.loading.school = true;\n        _this6.source.school = 'unknown';\n        try {\n          const s = yield _this6.api.getSchool(_this6.schoolId);\n          if (s) {\n            _this6.school = s;\n            _this6.source.school = 'live';\n          } else _this6.source.school = 'cache';\n        } catch (e) {\n          _this6.source.school = 'cache';\n        } finally {\n          _this6.loading.school = false;\n        }\n      })();\n    }\n    enterFullscreen() {\n      return _asyncToGenerator(function* () {\n        try {\n          const el = document.documentElement;\n          if (el.requestFullscreen) yield el.requestFullscreen();else if (el.webkitRequestFullscreen) el.webkitRequestFullscreen();\n        } catch (e) {\n          console.debug('Fullscreen failed', e);\n        }\n      })();\n    }\n    getCountdownTileClass() {\n      if (!this.schedule?.isActive || !this.schedule?.current) return '';\n      const periodType = this.schedule.current.period_type;\n      const remainingMinutes = this.schedule.remainingMinutes || 0;\n      const elapsedMinutes = this.schedule.elapsedMinutes || 0;\n      // Add pulse animation if less than 1 minute remaining OR less than 1 minute elapsed (start of period)\n      const shouldPulse = remainingMinutes < 1 || elapsedMinutes < 1;\n      let baseClass = '';\n      switch (periodType) {\n        case 'class':\n          baseClass = 'period-class';\n          break;\n        case 'break':\n          baseClass = 'period-break';\n          break;\n        case 'lunch':\n          baseClass = 'period-lunch';\n          break;\n        default:\n          return '';\n      }\n      return shouldPulse ? `${baseClass} pulse` : baseClass;\n    }\n    // Filter duty assignments based on current time and school schedule\n    getFilteredDuty() {\n      if (!this.duty || !this.school || !this.schedule?.lessons) return [];\n      const now = this.simActive && this.simulatedNow ? this.simulatedNow : new Date();\n      const currentTime = now.getHours() * 60 + now.getMinutes(); // minutes since midnight\n      const dayOfWeekNum = now.getDay();\n      const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n      const currentDayOfWeek = dayNames[dayOfWeekNum];\n      // Get school times\n      const schoolStartTime = this.parseTimeToMinutes(this.school.start_time);\n      const lunchStartTime = this.parseTimeToMinutes(this.school.lunch_start_time);\n      const morningStartTime = schoolStartTime - 30; // 30 minutes before school start\n      // Find the last lesson end time for today\n      const todayLessons = this.schedule.lessons.filter(l => {\n        const lessonDate = new Date(l.date || now);\n        return lessonDate.toDateString() === now.toDateString();\n      });\n      let lastLessonEndTime = lunchStartTime; // fallback\n      if (todayLessons.length > 0) {\n        const endTimes = todayLessons.map(l => {\n          if (l.end_time) return this.parseTimeToMinutes(l.end_time);\n          if (l.start_time && l.duration_minutes) {\n            return this.parseTimeToMinutes(l.start_time) + Number(l.duration_minutes);\n          }\n          return 0;\n        }).filter(t => t > 0);\n        if (endTimes.length > 0) {\n          lastLessonEndTime = Math.max(...endTimes);\n        }\n      }\n      // Filter duty assignments: current day AND current time slot\n      const filtered = this.duty.filter(assignment => {\n        // First filter by current day\n        if (assignment.day_of_week !== currentDayOfWeek) return false;\n        const shift = assignment.shift; // 'morning' or 'afternoon'\n        if (shift === 'morning') {\n          // Morning shift: 30 minutes before school_start_time to lunch_start_time\n          return currentTime >= morningStartTime && currentTime <= lunchStartTime;\n        } else if (shift === 'afternoon') {\n          // Afternoon shift: lunch_start_time to last lesson end\n          return currentTime >= lunchStartTime && currentTime <= lastLessonEndTime;\n        }\n        return false;\n      });\n      // Group by location and shift\n      const groups = {};\n      filtered.forEach(assignment => {\n        let locationName = 'İdare';\n        let shiftName = assignment.shift === 'morning' ? 'Sabah' : 'Öğleden Sonra';\n        if (assignment.duty_location) {\n          locationName = `${assignment.duty_location.name} (${shiftName})`;\n        } else {\n          // Administrators don't have duty locations\n          locationName = `İdare (${shiftName})`;\n        }\n        if (!groups[locationName]) {\n          groups[locationName] = [];\n        }\n        groups[locationName].push(assignment);\n      });\n      // Convert to array and sort groups by location order\n      const result = Object.keys(groups).map(locationName => ({\n        location: locationName,\n        assignments: groups[locationName].sort((a, b) => {\n          // Within each group, sort by administrator status, then vice principal status\n          const aIsAdministrator = !a.duty_location;\n          const bIsAdministrator = !b.duty_location;\n          const aIsVicePrincipal = a.employee?.employee_type?.is_vice_principal || false;\n          const bIsVicePrincipal = b.employee?.employee_type?.is_vice_principal || false;\n          // Administrators first\n          if (aIsAdministrator && !bIsAdministrator) return -1;\n          if (!aIsAdministrator && bIsAdministrator) return 1;\n          // Then vice principals\n          if (aIsVicePrincipal && !bIsVicePrincipal) return -1;\n          if (!aIsVicePrincipal && bIsVicePrincipal) return 1;\n          // Then by duty location order if they have locations\n          if (a.duty_location && b.duty_location) {\n            return (a.duty_location.order || 0) - (b.duty_location.order || 0);\n          }\n          return 0;\n        })\n      }));\n      // Sort groups: put Yönetim groups first, then sort by location order\n      return result.sort((a, b) => {\n        const aIsManagement = a.location.includes('İdare');\n        const bIsManagement = b.location.includes('İdare');\n        if (aIsManagement && !bIsManagement) return -1;\n        if (!aIsManagement && bIsManagement) return 1;\n        // For non-management groups, try to sort by location order\n        // Extract location order from assignments (assuming all assignments in group have same location)\n        const aOrder = a.assignments[0]?.duty_location?.order || 999;\n        const bOrder = b.assignments[0]?.duty_location?.order || 999;\n        return aOrder - bOrder;\n      });\n    }\n    // Helper to parse time string (HH:MM) to minutes since midnight\n    parseTimeToMinutes(timeStr) {\n      if (!timeStr) return 0;\n      const parts = timeStr.split(':');\n      if (parts.length >= 2) {\n        return parseInt(parts[0]) * 60 + parseInt(parts[1]);\n      }\n      return 0;\n    }\n    updateScheduleDerived(nowDate) {\n      console.log('updateScheduleDerived called with nowDate:', nowDate);\n      console.log('Current date/time info:');\n      console.log('- Full date:', nowDate.toISOString());\n      console.log('- Date string:', nowDate.toDateString());\n      console.log('- Time string:', nowDate.toTimeString());\n      console.log('- getDay() (JS):', nowDate.getDay(), '(0=Sun, 1=Mon, ..., 5=Fri, 6=Sat)');\n      console.log('- API day_of_week equivalent:', nowDate.getDay() === 0 ? 7 : nowDate.getDay(), '(1=Mon, ..., 7=Sun)');\n      if (!this.schedule || !Array.isArray(this.schedule.lessons)) {\n        console.log('No schedule or lessons array:', this.schedule);\n        return;\n      }\n      const lessons = this.schedule.lessons;\n      const currentDayOfWeek = nowDate.getDay() === 0 ? 7 : nowDate.getDay();\n      console.log('Processing', lessons.length, 'lessons for day_of_week =', currentDayOfWeek);\n      // Filter lessons for current day\n      const todayLessons = lessons.filter(l => {\n        if (typeof l.day_of_week !== 'undefined' && l.day_of_week !== null) {\n          return Number(l.day_of_week) === currentDayOfWeek;\n        }\n        return true; // No day_of_week field means include all\n      });\n      console.log('Found', todayLessons.length, 'lessons for today');\n      const today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate());\n      let active = null;\n      let next = null;\n      // First pass: find active period\n      for (const l of todayLessons) {\n        // Parse start and end times\n        let start = null;\n        let end = null;\n        let title = l.title || l.period_name || '';\n        if (l.start_time) {\n          const [hh, mm, ss] = String(l.start_time).split(':').map(x => parseInt(x, 10));\n          start = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hh || 0, mm || 0, ss || 0);\n        }\n        if (l.end_time) {\n          const [ehh, emm, ess] = String(l.end_time).split(':').map(x => parseInt(x, 10));\n          end = new Date(today.getFullYear(), today.getMonth(), today.getDate(), ehh || 0, emm || 0, ess || 0);\n        }\n        // If no end_time, calculate from duration_minutes\n        if (!end && l.duration_minutes && start) {\n          end = new Date(start.getTime() + Number(l.duration_minutes) * 60000);\n        }\n        // Title fallback\n        if (!title) {\n          if (l.period_type === 'class') title = l.period_name || 'Ders';else if (l.period_type) title = l.period_type.replace(/(^|_)([a-z])/g, (m, p, c) => c.toUpperCase());else title = 'Periyot';\n        }\n        // Legacy time range support\n        if (!start && !end && l.time) {\n          const parts = String(l.time).split('-').map(p => p.trim());\n          if (parts.length >= 2) {\n            start = this.parseTimeToDate(parts[0], today);\n            end = this.parseTimeToDate(parts[1], today);\n            if (!title) title = l.title || 'Ders';\n          }\n        }\n        // Skip if missing start or end time\n        if (!start || !end) {\n          console.log('Missing start or end time, skipping lesson:', l.period_name);\n          continue;\n        }\n        const timeRange = `${this.formatTime(start)} - ${this.formatTime(end)}`;\n        console.log('Checking lesson:', l.period_name, 'time range:', timeRange);\n        // Check if current time is within this period\n        if (nowDate >= start && nowDate <= end) {\n          console.log('Found active period:', l.period_name);\n          active = {\n            title: title || l.period_name || 'Ders',\n            start,\n            end,\n            timeRange,\n            period_type: l.period_type || (l.duration_minutes ? 'class' : undefined),\n            period_name: l.period_name\n          };\n          break; // Found active period, no need to continue first pass\n        }\n      }\n      // Second pass: find next period (only if we have lessons and no active period, or we want next even with active)\n      for (const l of todayLessons) {\n        // Parse start and end times (same logic as first pass)\n        let start = null;\n        let end = null;\n        let title = l.title || l.period_name || '';\n        if (l.start_time) {\n          const [hh, mm, ss] = String(l.start_time).split(':').map(x => parseInt(x, 10));\n          start = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hh || 0, mm || 0, ss || 0);\n        }\n        if (l.end_time) {\n          const [ehh, emm, ess] = String(l.end_time).split(':').map(x => parseInt(x, 10));\n          end = new Date(today.getFullYear(), today.getMonth(), today.getDate(), ehh || 0, emm || 0, ess || 0);\n        }\n        // If no end_time, calculate from duration_minutes\n        if (!end && l.duration_minutes && start) {\n          end = new Date(start.getTime() + Number(l.duration_minutes) * 60000);\n        }\n        // Title fallback\n        if (!title) {\n          if (l.period_type === 'class') title = l.period_name || 'Ders';else if (l.period_type) title = l.period_type.replace(/(^|_)([a-z])/g, (m, p, c) => c.toUpperCase());else title = 'Periyot';\n        }\n        // Legacy time range support\n        if (!start && !end && l.time) {\n          const parts = String(l.time).split('-').map(p => p.trim());\n          if (parts.length >= 2) {\n            start = this.parseTimeToDate(parts[0], today);\n            end = this.parseTimeToDate(parts[1], today);\n            if (!title) title = l.title || 'Ders';\n          }\n        }\n        // Skip if missing start or end time\n        if (!start || !end) {\n          continue;\n        }\n        // Check if this is the next upcoming period\n        if (nowDate < start && (!next || start < next.start)) {\n          next = {\n            title: title || l.period_name || 'Ders',\n            start,\n            end,\n            timeRange: `${this.formatTime(start)} - ${this.formatTime(end)}`,\n            period_type: l.period_type || (l.duration_minutes ? 'class' : undefined),\n            period_name: l.period_name\n          };\n        }\n      }\n      // Update schedule based on findings\n      if (active) {\n        const diffMs = active.end.getTime() - nowDate.getTime();\n        const totalMs = active.end.getTime() - active.start.getTime();\n        const mm = Math.floor(diffMs / 60000);\n        const ss = Math.floor(diffMs % 60000 / 1000);\n        const mmStr = String(mm).padStart(2, '0');\n        const ssStr = String(ss).padStart(2, '0');\n        this.schedule.current = active;\n        this.schedule.next = next; // Store next period info\n        this.schedule.isActive = true;\n        this.schedule.timeLeftText = `${mmStr} : ${ssStr}`;\n        this.schedule.remainingMinutes = mm + ss / 60; // Store remaining time in minutes\n        this.schedule.elapsedMinutes = (totalMs - diffMs) / 60000; // Store elapsed time in minutes\n        console.log('Active period set:', active.period_name, 'remaining:', this.schedule.timeLeftText, 'minutes:', this.schedule.remainingMinutes, 'elapsed:', this.schedule.elapsedMinutes);\n        // Check for class transition modal: if current is break, next is class, and less than 1 minute remaining\n        if (active.period_type === 'break' && next?.period_type === 'class' && this.schedule.remainingMinutes < 1) {\n          this.showClassTransitionModal = true;\n          this.classTransitionCountdown = this.formatTimeRemaining(diffMs);\n        } else {\n          this.showClassTransitionModal = false;\n          this.classTransitionCountdown = '';\n        }\n      } else if (next) {\n        const diffMs = next.start.getTime() - nowDate.getTime();\n        this.schedule.current = {\n          title: 'Sonraki: ' + (next.title || ''),\n          start: next.start,\n          end: next.end,\n          timeRange: next.timeRange,\n          period_name: next.period_name || next.title\n        };\n        this.schedule.next = null; // No next period when current is next\n        this.schedule.isActive = false;\n        this.schedule.timeLeftText = this.formatTimeRemaining(diffMs);\n        this.schedule.remainingMinutes = null; // No remaining time for upcoming periods\n        this.schedule.elapsedMinutes = null; // No elapsed time for upcoming periods\n        console.log('Next period set:', next.period_name, 'starts in:', this.schedule.timeLeftText);\n        // Hide modal when no active period\n        this.showClassTransitionModal = false;\n        this.classTransitionCountdown = '';\n      } else {\n        this.schedule.current = null;\n        this.schedule.next = null;\n        this.schedule.isActive = false;\n        this.schedule.timeLeftText = '-- : --';\n        this.schedule.remainingMinutes = null;\n        this.schedule.elapsedMinutes = null;\n        console.log('No active or upcoming periods found');\n        // Hide modal when no periods\n        this.showClassTransitionModal = false;\n        this.classTransitionCountdown = '';\n      }\n    }\n    formatTime(d) {\n      const hh = String(d.getHours()).padStart(2, '0');\n      const mm = String(d.getMinutes()).padStart(2, '0');\n      return `${hh}:${mm}`;\n    }\n    formatTimeRemaining(milliseconds) {\n      const totalMinutes = Math.floor(milliseconds / 60000);\n      // Eğer 24 saat (1440 dakika) ve üstü ise gün olarak göster\n      if (totalMinutes >= 1440) {\n        const days = Math.floor(totalMinutes / 1440);\n        return `${days} gün`;\n      }\n      // Normal format: gün saat dakika saniye (sıfır olanları gösterme)\n      const days = Math.floor(totalMinutes / 1440);\n      const hours = Math.floor(totalMinutes % 1440 / 60);\n      const minutes = Math.floor(totalMinutes % 60);\n      const seconds = Math.floor(milliseconds % 60000 / 1000);\n      const parts = [];\n      if (days > 0) parts.push(`${days} gün`);\n      if (hours > 0) parts.push(`${hours} saat`);\n      if (minutes > 0) parts.push(`${minutes} dakika`);\n      if (seconds > 0 && parts.length === 0) parts.push(`${seconds} saniye`); // Sadece saniye varsa göster\n      return parts.join(' ') || '0 saniye';\n    }\n    parseTimeToDate(t, base) {\n      try {\n        const m = t.match(/(\\d{1,2}):(\\d{2})/);\n        if (!m) return null;\n        const hh = parseInt(m[1]);\n        const mm = parseInt(m[2]);\n        return new Date(base.getFullYear(), base.getMonth(), base.getDate(), hh, mm, 0);\n      } catch (e) {\n        return null;\n      }\n    }\n    // compute which announcements are active at the provided now (uses this.now)\n    computeActiveAnnouncements() {\n      try {\n        const now = this.now || new Date();\n        const list = (this.announcements || []).filter(a => {\n          try {\n            // fields considered: start_date, expiration_date, publish_start_time, publish_end_time\n            // if no scheduling fields provided, treat as always active\n            if (a.start_date && a.expiration_date) {\n              const sd = new Date(a.start_date);\n              const ed = new Date(a.expiration_date);\n              if (now < sd || now > ed) return false;\n            }\n            if (a.publish_start_time && a.publish_end_time) {\n              // publish times may be in HH:MM format -> compare against today's times\n              const base = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n              const ps = this.parseTimeToDate(String(a.publish_start_time), base);\n              const pe = this.parseTimeToDate(String(a.publish_end_time), base);\n              if (ps && pe) {\n                if (now < ps || now > pe) return false;\n              }\n            }\n            return true;\n          } catch (e) {\n            return true;\n          }\n        });\n        this.activeAnnouncements = list;\n        if (this.currentAnnouncementIndex >= this.activeAnnouncements.length) this.currentAnnouncementIndex = 0;\n      } catch (e) {\n        this.activeAnnouncements = this.announcements || [];\n      }\n    }\n    startAnnouncementCarousel() {\n      this.stopAnnouncementCarousel();\n      if (!this.activeAnnouncements || this.activeAnnouncements.length === 0) return;\n      const show = this.activeAnnouncements[this.currentAnnouncementIndex] || this.activeAnnouncements[0];\n      const duration = show && show.display_duration_ms ? Number(show.display_duration_ms) : 10000;\n      this.announcementTimerId = setTimeout(() => {\n        this.currentAnnouncementIndex = (this.currentAnnouncementIndex + 1) % (this.activeAnnouncements.length || 1);\n        this.computeActiveAnnouncements();\n        this.startAnnouncementCarousel();\n      }, duration);\n    }\n    stopAnnouncementCarousel() {\n      if (this.announcementTimerId) {\n        clearTimeout(this.announcementTimerId);\n        this.announcementTimerId = null;\n      }\n    }\n    // parse simulation time. Accepts ISO or '20 ekim 2025 09:25' (Turkish month names), or '20 ekim pazartesi 09:25'\n    parseSimTime(s) {\n      if (!s) return null;\n      // try ISO first\n      const iso = Date.parse(s);\n      if (!isNaN(iso)) return new Date(iso);\n      // normalize and try to parse Turkish month names\n      const months = {\n        'ocak': 0,\n        'şubat': 1,\n        'subat': 1,\n        'mart': 2,\n        'nisan': 3,\n        'mayıs': 4,\n        'mayis': 4,\n        'haziran': 5,\n        'temmuz': 6,\n        'ağustos': 7,\n        'agustos': 7,\n        'eylül': 8,\n        'eylul': 8,\n        'ekim': 9,\n        'kasım': 10,\n        'kasim': 10,\n        'aralık': 11,\n        'aralik': 11\n      };\n      // remove weekday words and commas\n      let t = s.toLowerCase().replace(/[,]/g, ' ').replace(/\\b(pazartesi|salı|sali|çarşamba|carsamba|perşembe|persembe|cuma|cumartesi|pazar)\\b/g, '');\n      t = t.replace(/\\s+/g, ' ').trim();\n      // expected patterns: '20 ekim 2025 09:25' or '20 ekim 09:25' (assume current year)\n      const parts = t.split(' ');\n      if (parts.length >= 2) {\n        // find day\n        const day = parseInt(parts[0]);\n        // find month token in parts\n        let monthIdx = -1;\n        let monthNum = -1;\n        let year = new Date().getFullYear();\n        let timePart = '00:00';\n        for (let i = 1; i < parts.length; i++) {\n          const p = parts[i];\n          if (months[p] !== undefined) {\n            monthIdx = i;\n            monthNum = months[p];\n          }\n        }\n        if (monthIdx === -1) return null;\n        // year might be the token after month\n        if (parts.length > monthIdx + 1 && /^\\d{4}$/.test(parts[monthIdx + 1])) year = parseInt(parts[monthIdx + 1]);\n        // time may be at the end\n        const last = parts[parts.length - 1];\n        if (/^\\d{1,2}:\\d{2}$/.test(last)) timePart = last;\n        const [hh, mm] = timePart.split(':').map(x => parseInt(x) || 0);\n        if (!day || monthNum < 0) return null;\n        return new Date(year, monthNum, day, hh, mm, 0);\n      }\n      return null;\n    }\n    stopBirthdayCarousel() {\n      if (this.birthdayTimerId) {\n        clearInterval(this.birthdayTimerId);\n        this.birthdayTimerId = null;\n      }\n    }\n    startBirthdayCarousel() {\n      this.stopBirthdayCarousel(); // Clear any existing timer\n      if (this.birthdays.length > 1) {\n        // Only start if we have more than 1 birthday\n        this.birthdayTimerId = setInterval(() => {\n          // Add highlight effect before changing\n          const currentElement = document.querySelector('.student-name');\n          if (currentElement) {\n            currentElement.classList.add('highlight');\n            setTimeout(() => {\n              currentElement.classList.remove('highlight');\n              this.currentBirthdayIndex = (this.currentBirthdayIndex + 1) % this.birthdays.length;\n            }, 300);\n          } else {\n            this.currentBirthdayIndex = (this.currentBirthdayIndex + 1) % this.birthdays.length;\n          }\n        }, 5000); // Change every 5 seconds\n      }\n    }\n    static {\n      this.ɵfac = function KioskComponent_Factory(t) {\n        return new (t || KioskComponent)(i0.ɵɵdirectiveInject(i1.MockApiService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: KioskComponent,\n        selectors: [[\"app-kiosk\"]],\n        decls: 40,\n        vars: 24,\n        consts: [[1, \"kiosk-root\"], [1, \"top-tiles\"], [1, \"tile\", \"tile-school\"], [1, \"period-school\"], [\"alt\", \"logo\", \"class\", \"period-school-logo\", 3, \"src\", 4, \"ngIf\"], [1, \"period-school-name\"], [1, \"tile\", \"tile-countdown\", 3, \"ngClass\"], [1, \"countdown-lesson\"], [4, \"ngIf\"], [\"class\", \"countdown-next\", 4, \"ngIf\"], [1, \"countdown-clock\"], [1, \"tile\", \"tile-date\"], [1, \"date-day\"], [1, \"date-time\"], [1, \"content-grid\"], [1, \"left-col\"], [\"class\", \"card duty-card\", 4, \"ngIf\"], [1, \"card\", \"birthdays-card\"], [\"class\", \"card-title\", \"style\", \"padding:0px 4px;\", 4, \"ngIf\"], [\"class\", \"birthday-carousel\", 4, \"ngIf\"], [\"class\", \"birthday-empty\", 4, \"ngIf\"], [1, \"main-col\"], [1, \"card\", \"main-card\"], [1, \"announce-area\"], [\"class\", \"announce-empty\", 4, \"ngIf\"], [\"class\", \"announce-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"kiosk-footer\"], [1, \"footer-content\"], [1, \"status-icon\", 3, \"title\"], [\"class\", \"fs-btn\", \"title\", \"Tam Ekran\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"modal-overlay\", 4, \"ngIf\"], [\"alt\", \"logo\", 1, \"period-school-logo\", 3, \"src\"], [1, \"countdown-next\"], [\"class\", \"countdown-next-time\", 4, \"ngIf\"], [1, \"countdown-next-time\"], [1, \"card\", \"duty-card\"], [1, \"card-title\"], [\"class\", \"duty-group\", 4, \"ngFor\", \"ngForOf\"], [1, \"duty-group\"], [1, \"duty-group-header\"], [1, \"duty-list\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"], [1, \"guard-name\"], [\"class\", \"vice-principal-badge\", 4, \"ngIf\"], [1, \"vice-principal-badge\"], [1, \"card-title\", 2, \"padding\", \"0px 4px\"], [1, \"birthday-emoji\"], [1, \"birthday-carousel\"], [\"class\", \"birthday-item\", 4, \"ngIf\"], [1, \"birthday-item\"], [1, \"student-name\"], [1, \"student-class\"], [1, \"birthday-empty\"], [1, \"empty-icon\"], [1, \"announce-empty\"], [1, \"announce-item\"], [3, \"innerText\"], [1, \"announce-text\", 3, \"innerHTML\"], [\"title\", \"Tam Ekran\", 1, \"fs-btn\", 3, \"click\"], [1, \"modal-overlay\"], [1, \"modal-content\"], [1, \"modal-icon\"], [1, \"modal-subtitle\"]],\n        template: function KioskComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n            i0.ɵɵtemplate(4, KioskComponent_img_4_Template, 1, 1, \"img\", 4);\n            i0.ɵɵelementStart(5, \"div\", 5);\n            i0.ɵɵtext(6);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\", 7);\n            i0.ɵɵtemplate(9, KioskComponent_ng_container_9_Template, 2, 1, \"ng-container\", 8);\n            i0.ɵɵtemplate(10, KioskComponent_ng_container_10_Template, 2, 1, \"ng-container\", 8);\n            i0.ɵɵtemplate(11, KioskComponent_ng_container_11_Template, 2, 0, \"ng-container\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(12, KioskComponent_div_12_Template, 3, 2, \"div\", 9);\n            i0.ɵɵelementStart(13, \"div\", 10);\n            i0.ɵɵtext(14);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(15, \"div\", 11)(16, \"div\", 12);\n            i0.ɵɵtext(17);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(18, \"div\", 13);\n            i0.ɵɵtext(19);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(20, \"div\", 14)(21, \"aside\", 15);\n            i0.ɵɵtemplate(22, KioskComponent_div_22_Template, 4, 1, \"div\", 16);\n            i0.ɵɵelementStart(23, \"div\", 17);\n            i0.ɵɵtemplate(24, KioskComponent_div_24_Template, 4, 1, \"div\", 18);\n            i0.ɵɵtemplate(25, KioskComponent_div_25_Template, 2, 1, \"div\", 19);\n            i0.ɵɵtemplate(26, KioskComponent_div_26_Template, 7, 0, \"div\", 20);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(27, \"main\", 21)(28, \"div\", 22)(29, \"div\", 23);\n            i0.ɵɵtemplate(30, KioskComponent_div_30_Template, 2, 0, \"div\", 24);\n            i0.ɵɵtemplate(31, KioskComponent_div_31_Template, 3, 2, \"div\", 25);\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(32, \"footer\", 26)(33, \"div\", 27)(34, \"span\", 28);\n            i0.ɵɵtext(35);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(36);\n            i0.ɵɵpipe(37, \"date\");\n            i0.ɵɵtemplate(38, KioskComponent_button_38_Template, 2, 0, \"button\", 29);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(39, KioskComponent_div_39_Template, 10, 1, \"div\", 30);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.school == null ? null : ctx.school.logoUrl);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate((ctx.school == null ? null : ctx.school.name) || \"Okulum\");\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngClass\", ctx.getCountdownTileClass());\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.schedule == null ? null : ctx.schedule.isActive);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !(ctx.schedule == null ? null : ctx.schedule.isActive) && (ctx.schedule == null ? null : ctx.schedule.current));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !(ctx.schedule == null ? null : ctx.schedule.isActive) && !(ctx.schedule == null ? null : ctx.schedule.current));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.schedule == null ? null : ctx.schedule.next);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate((ctx.schedule == null ? null : ctx.schedule.timeLeftText) || \"-- : --\");\n            i0.ɵɵadvance(3);\n            i0.ɵɵtextInterpolate(ctx.todayText);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.nowText);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.getFilteredDuty().length > 0);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.birthdays.length > 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.birthdays.length > 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.birthdays.length === 0);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.announcements.length === 0);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.announcements);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"title\", ctx.isOnline ? \"\\u00C7evrimi\\u00E7i\" : \"\\u00C7evrimd\\u0131\\u015F\\u0131\");\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isOnline ? \"\\uD83D\\uDFE2\" : \"\\uD83D\\uDD34\", \" \");\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(37, 21, ctx.lastUpdated, \"dd.MM.yyyy HH:mm\"), \" \");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.showFullscreenButton);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.showClassTransitionModal);\n          }\n        },\n        dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i3.DatePipe],\n        styles: [\"[_nghost-%COMP%]{display:block;height:100vh;font-family:Segoe UI,Roboto,Arial,sans-serif}.kiosk-root[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:fixed;top:0;left:0;width:100vw;height:100vh;background:#2f3234;color:#111;z-index:1;padding-bottom:50px}.top-tiles[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 1fr 1fr;gap:10px;padding:10px}.tile[_ngcontent-%COMP%]{padding:18px;color:#fff;display:flex;flex-direction:column;justify-content:center;width:100%;box-sizing:border-box}.tile-school[_ngcontent-%COMP%]{background:white}.tile-school.period-class[_ngcontent-%COMP%]{background:#d94a4a}.tile-school.period-break[_ngcontent-%COMP%]{background:#4caf50}.tile-school.period-lunch[_ngcontent-%COMP%]{background:#f0a23a}.tile-countdown[_ngcontent-%COMP%]{background:#3aa0e6;align-items:center}.tile-countdown.period-class[_ngcontent-%COMP%]{background:#d94a4a}.tile-countdown.period-break[_ngcontent-%COMP%]{background:#4caf50}.tile-countdown.period-lunch[_ngcontent-%COMP%]{background:#f0a23a}.tile-countdown.period-class.pulse[_ngcontent-%COMP%]{background:#d94a4a;animation:_ngcontent-%COMP%_pulse-red 1.5s infinite}.tile-countdown.period-break.pulse[_ngcontent-%COMP%]{background:#4caf50;animation:_ngcontent-%COMP%_pulse-green 1.5s infinite}.tile-countdown.period-lunch.pulse[_ngcontent-%COMP%]{background:#f0a23a;animation:_ngcontent-%COMP%_pulse-orange 1.5s infinite}@keyframes _ngcontent-%COMP%_pulse-red{0%,to{background-color:#d94a4a}25%{background-color:#e55a5a}50%{background-color:#ff6b6b}75%{background-color:#e55a5a}}@keyframes _ngcontent-%COMP%_pulse-green{0%,to{background-color:#4caf50}25%{background-color:#66bb6a}50%{background-color:#81c784}75%{background-color:#66bb6a}}@keyframes _ngcontent-%COMP%_pulse-orange{0%,to{background-color:#f0a23a}25%{background-color:#fb8c00}50%{background-color:#ffb74d}75%{background-color:#fb8c00}}.tile-date[_ngcontent-%COMP%]{background:linear-gradient(180deg,#ffd54f,#f0a23a);align-items:center;justify-content:center;text-align:center;color:#111;box-shadow:inset 0 -2px 6px #0000000f}.period-day[_ngcontent-%COMP%]{font-size:16px;opacity:.95;margin-bottom:6px;color:#fff}.period-label[_ngcontent-%COMP%]{font-size:28px;font-weight:700}.period-school[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;gap:12px;margin:0;height:90%;width:100%}.period-school-logo[_ngcontent-%COMP%]{width:50%;object-fit:contain;background:#fff;padding:6px}.period-school-name[_ngcontent-%COMP%]{font-size:24px;font-weight:800;color:#000}.period-time[_ngcontent-%COMP%]{font-size:20px;opacity:.95}.countdown-lesson[_ngcontent-%COMP%]{font-size:20px;font-weight:700;margin:6px 0;color:#fff}.countdown-next[_ngcontent-%COMP%]{font-size:16px;font-weight:500;margin:4px 0;color:#ffe;opacity:.9}.countdown-next-time[_ngcontent-%COMP%]{font-size:14px;opacity:.8;margin-left:4px}.countdown-period-name[_ngcontent-%COMP%]{font-size:16px;font-weight:500;color:#ffe}.countdown-title[_ngcontent-%COMP%]{font-size:14px}.countdown-clock[_ngcontent-%COMP%]{font-size:42px;font-weight:700}.date-day[_ngcontent-%COMP%]{font-size:34px;font-weight:700;line-height:1;color:#111}.date-time[_ngcontent-%COMP%]{font-size:40px;font-weight:700;opacity:.95;color:#111}.content-grid[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 2fr;gap:10px;padding:0 10px 10px;height:calc(100vh - 120px)}.left-col[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:10px;height:100%}.school-card[_ngcontent-%COMP%]{background:#fff;padding:12px;display:flex;align-items:center;gap:12px}.school-logo[_ngcontent-%COMP%]{height:56px;width:56px;object-fit:contain}.school-name[_ngcontent-%COMP%]{font-weight:700;color:#222}.card[_ngcontent-%COMP%]{background:#fff;padding:12px;box-shadow:0 4px 10px #00000014;width:100%;box-sizing:border-box}.card-title[_ngcontent-%COMP%]{font-weight:700;padding:8px 4px;color:#333;font-size:18px}.card-title[_ngcontent-%COMP%]   .birthday-emoji[_ngcontent-%COMP%]{font-size:36px;margin-right:8px}.duty-card[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%], .birthdays-card[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{list-style:none;padding:0;margin:0}.duty-card[_ngcontent-%COMP%]   li[_ngcontent-%COMP%], .birthdays-card[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding:8px 6px;border-bottom:1px solid #eee}.duty-card[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:last-child, .birthdays-card[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:last-child{border-bottom:none}.birthday-empty[_ngcontent-%COMP%]{text-align:center;padding:20px;color:#666}.birthday-empty[_ngcontent-%COMP%]   .empty-icon[_ngcontent-%COMP%]{font-size:48px;margin-bottom:16px}.birthday-empty[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:8px 0;font-size:16px}.birthday-empty[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]:first-of-type{font-weight:500;color:#333}.birthday-carousel[_ngcontent-%COMP%]{margin:8px 0}.birthday-item[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;padding:12px 8px;background:#f9f9f9;border-left:4px solid #ff9800;transition:all .5s ease-in-out;opacity:1;position:relative}.birthday-item.changing[_ngcontent-%COMP%]{animation:birthday-change .8s ease-in-out}.birthday-item[_ngcontent-%COMP%]   .firework-overlay[_ngcontent-%COMP%]{position:absolute;inset:0;pointer-events:none;display:flex;align-items:center;justify-content:center;font-size:36px;animation:firework-burst .8s ease-out}.student-name[_ngcontent-%COMP%]{font-weight:600;color:#333;transition:all .3s ease}.student-name.highlight[_ngcontent-%COMP%]{color:#ff5722;transform:scale(1.05);text-shadow:0 0 8px rgba(255,87,34,.5)}.student-class[_ngcontent-%COMP%]{font-size:14px;color:#666;font-weight:500;background:#fff;padding:4px 8px;border:1px solid #e0e0e0}.duty-group[_ngcontent-%COMP%]:last-child{margin-bottom:0}.duty-group-header[_ngcontent-%COMP%]{font-weight:700;font-size:16px;color:#1976d2;margin-bottom:4px;padding:6px 8px;background:#f5f5f5;border-left:4px solid #1976d2}.duty-list[_ngcontent-%COMP%]{margin:0;padding:0}.duty-list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:last-child{border-bottom:none}.guard-name[_ngcontent-%COMP%]{font-weight:600}.duty-shift[_ngcontent-%COMP%]{font-size:12px;color:#666;margin-left:4px}.administrator[_ngcontent-%COMP%]{background:#e8f5e8!important;border-left:4px solid #4caf50!important;padding-left:12px!important}.administrator[_ngcontent-%COMP%]   .guard-name[_ngcontent-%COMP%]{color:#2e7d32;font-weight:700}.vice-principal[_ngcontent-%COMP%]{background:#fff3cd!important;border-left:4px solid #ffc107!important;padding-left:12px!important}.vice-principal[_ngcontent-%COMP%]   .guard-name[_ngcontent-%COMP%]{color:#856404;font-weight:700}.vice-principal-badge[_ngcontent-%COMP%]{color:#856404;font-weight:600;font-size:14px;margin-left:4px}.administrator-badge[_ngcontent-%COMP%]{color:#2e7d32;font-weight:600;font-size:14px;margin-left:4px}.duty-info[_ngcontent-%COMP%]{color:#666}.main-col[_ngcontent-%COMP%]{display:flex}.main-card[_ngcontent-%COMP%]{height:100%;min-height:320px;display:flex;align-items:center;justify-content:center;overflow:hidden}.announce-area[_ngcontent-%COMP%]{width:100%;padding:24px;text-align:center}.announce-item[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:48px;margin:8px 0}.announce-text[_ngcontent-%COMP%]{font-size:20px;color:#444}.kiosk-footer[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;align-items:center;gap:10px;padding:0 0 10px;font-size:13px;color:#222;position:fixed;bottom:0;left:0;right:0;width:100vw;z-index:1000}.status-icon[_ngcontent-%COMP%]{margin-right:8px;font-size:14px}.fs-btn[_ngcontent-%COMP%]{background:rgba(0,0,0,.06);border:0;padding:8px 12px;color:#222}.empty[_ngcontent-%COMP%]{opacity:.6}@media (max-width:1100px){.top-tiles[_ngcontent-%COMP%]{grid-template-columns:1fr 1fr 1fr}.content-grid[_ngcontent-%COMP%]{grid-template-columns:1fr}}.modal-overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,.8);display:flex;align-items:center;justify-content:center;z-index:2000;animation:_ngcontent-%COMP%_modal-fade-in .3s ease-out}.modal-content[_ngcontent-%COMP%]{background:#fff;padding:60px;text-align:center;box-shadow:0 20px 60px #0006;max-width:800px;width:95%;animation:_ngcontent-%COMP%_modal-slide-up .4s ease-out}.modal-icon[_ngcontent-%COMP%]{font-size:120px;margin-bottom:30px;animation:_ngcontent-%COMP%_bell-ring 1s ease-in-out infinite}.modal-content[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{color:#d94a4a;font-size:48px;font-weight:700;margin:0 0 20px}.modal-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:32px;color:#333;margin:15px 0;font-weight:600}.modal-subtitle[_ngcontent-%COMP%]{font-size:24px!important;color:#666!important;font-weight:400!important}@keyframes _ngcontent-%COMP%_modal-fade-in{0%{opacity:0}to{opacity:1}}@keyframes _ngcontent-%COMP%_modal-slide-up{0%{transform:translateY(50px);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes _ngcontent-%COMP%_bell-ring{0%,to{transform:rotate(0)}25%{transform:rotate(5deg)}75%{transform:rotate(-5deg)}}\"]\n      });\n    }\n  }\n  return KioskComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}