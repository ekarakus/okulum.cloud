{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ergun/OneDrive/Desktop/okulum.cloud/screen-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let KioskComponent = class KioskComponent {\n  constructor(api, route) {\n    this.api = api;\n    this.route = route;\n    this.locale = 'tr'; // Varsayılan dil ve yerel ayar Türkçe\n    this.notifications = [];\n    this.schedule = null;\n    this.duty = null; // Re-enabled for duty schedule\n    this.announcements = [];\n    this.activeAnnouncements = [];\n    this.currentAnnouncementIndex = 0;\n    this.announcementTimerId = null;\n    // birthdays: Array<{name:string,birthday:string}> = []; // Removed - not needed\n    this.lastUpdated = new Date();\n    this.school = null;\n    this.now = new Date();\n    this.today = new Date();\n    this.nowText = '';\n    this.todayText = '';\n    this.weekdayText = '';\n    // Optional school scope - set this if you have a school id to query\n    this.schoolId = undefined;\n    // simulation\n    this.simActive = false;\n    // modal for class transition\n    this.showClassTransitionModal = false;\n    this.classTransitionCountdown = '';\n    // loading states\n    this.loading = {\n      notifications: false,\n      schedule: false,\n      // duty: false, // Removed - not needed\n      announcements: false,\n      // students: false, // Removed - not needed\n      school: false\n    };\n    // source markers (live|cache)\n    this.source = {\n      notifications: 'unknown',\n      schedule: 'unknown',\n      // duty: 'unknown', // Removed - not needed\n      announcements: 'unknown',\n      // students: 'unknown', // Removed - not needed\n      school: 'unknown'\n    };\n  }\n  ngOnInit() {\n    console.log('ngOnInit called');\n    // read runtime schoolId if provided\n    try {\n      const sid = window.__SCHOOL_ID__;\n      if (sid) this.schoolId = Number(sid);\n    } catch (e) {}\n    console.log('schoolId from config:', this.schoolId);\n    // If no numeric schoolId provided, try to resolve from first path segment (school code)\n    if (!this.schoolId) {\n      try {\n        const path = window.location.pathname || '/';\n        const seg = path.split('/').filter(Boolean)[0];\n        if (seg) {\n          // try resolving via public API\n          this.api.getSchoolByCode(seg).then(s => {\n            if (s && s.id) {\n              this.schoolId = Number(s.id);\n              this.school = s;\n              this.load();\n            } else {\n              // fallback: just load without school scope\n              this.load();\n            }\n          }).catch(() => {\n            this.load();\n          });\n          return; // load will be triggered after resolution\n        }\n      } catch (e) {/* ignore */}\n    }\n    this.load();\n    setInterval(() => this.load(), 30000); // refresh every 30s\n    // detect simulation param: window.__SIM_TIME__ or ?sim=... (accept ISO or Turkish-ish dates)\n    this.route.queryParams.subscribe(params => {\n      const simParam = window.__SIM_TIME__ || params['sim'];\n      if (simParam) {\n        const parsed = this.parseSimTime(String(simParam));\n        if (parsed) {\n          this.simActive = true;\n          this.simulatedNow = parsed;\n          this.now = new Date(this.simulatedNow);\n          this.today = new Date(this.simulatedNow);\n        }\n      }\n    });\n    // update clock every second; if simulation active, advance simulatedNow; else use real now\n    const tick = () => {\n      if (this.simActive && this.simulatedNow) {\n        this.simulatedNow = new Date(this.simulatedNow.getTime() + 1000);\n        this.now = new Date(this.simulatedNow);\n        this.today = new Date(this.simulatedNow);\n      } else {\n        this.now = new Date();\n        this.today = new Date();\n      }\n      // update human-readable strings to avoid relying on date pipe in template\n      try {\n        this.nowText = this.now.toLocaleTimeString('tr', {\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        });\n        // Format: \"20 Ekim Pazartesi 2025\" (day Month Weekday year) with Turkish locale and capitalized names\n        try {\n          const dayNum = this.today.getDate();\n          const monthName = this.today.toLocaleString('tr', {\n            month: 'long'\n          });\n          const weekdayName = this.today.toLocaleString('tr', {\n            weekday: 'long'\n          });\n          const monthCap = monthName.charAt(0).toLocaleUpperCase('tr') + monthName.slice(1);\n          const weekdayCap = weekdayName.charAt(0).toLocaleUpperCase('tr') + weekdayName.slice(1);\n          this.todayText = `${dayNum} ${monthCap} ${weekdayCap}`;\n          this.weekdayText = weekdayCap;\n        } catch (e) {\n          this.todayText = this.today.toLocaleDateString('tr', {\n            day: '2-digit',\n            month: 'long',\n            year: 'numeric'\n          });\n          try {\n            this.weekdayText = this.today.toLocaleString('tr', {\n              weekday: 'long'\n            });\n          } catch (e) {\n            this.weekdayText = '';\n          }\n        }\n      } catch (e) {\n        this.nowText = '';\n        this.todayText = '';\n        this.weekdayText = '';\n      }\n      // recompute derived schedule values (current/next period and countdown) each tick so countdown updates live\n      try {\n        if (this.schedule) this.updateScheduleDerived(this.now);\n      } catch (e) {}\n      // Update modal countdown if modal is showing\n      if (this.showClassTransitionModal && this.schedule?.current && this.schedule.remainingMinutes < 1) {\n        const diffMs = this.schedule.current.end.getTime() - this.now.getTime();\n        this.classTransitionCountdown = this.formatTimeRemaining(diffMs);\n      }\n    };\n    tick();\n    setInterval(tick, 1000);\n  }\n  ngOnDestroy() {\n    this.stopAnnouncementCarousel();\n  }\n  load() {\n    console.log('load() called');\n    // fetch each dataset and track loading + cached/live source\n    this.loadNotifications();\n    this.loadSchedule();\n    this.loadDuty(); // Re-enabled for duty schedule\n    this.loadAnnouncements();\n    // this.loadStudents(); // Removed - not needed\n    // load school info if available\n    if (this.schoolId) {\n      this.loadSchool();\n    }\n  }\n  loadNotifications() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.loading.notifications = true;\n      _this.source.notifications = 'unknown';\n      try {\n        const notes = yield _this.api.getNotifications();\n        _this.notifications = notes || [];\n        _this.source.notifications = 'live';\n      } catch (e) {\n        // MockApiService already falls back to cache; if it returned data it will be assigned.\n        _this.source.notifications = 'cache';\n      } finally {\n        _this.loading.notifications = false;\n        _this.lastUpdated = new Date();\n      }\n    })();\n  }\n  loadSchedule() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      console.log('loadSchedule called with schoolId:', _this2.schoolId);\n      _this2.loading.schedule = true;\n      _this2.source.schedule = 'unknown';\n      try {\n        const sched = yield _this2.api.getSchedule(_this2.schoolId);\n        console.log('Schedule loaded:', sched);\n        if (sched) {\n          // API returns array directly, wrap it in object with lessons property\n          _this2.schedule = {\n            lessons: Array.isArray(sched) ? sched : []\n          };\n          _this2.source.schedule = 'live';\n        } else _this2.source.schedule = 'cache';\n      } catch (e) {\n        console.error('Schedule load error:', e);\n        _this2.source.schedule = 'cache';\n      } finally {\n        _this2.loading.schedule = false;\n        _this2.lastUpdated = new Date();\n        console.log('Schedule after load:', _this2.schedule);\n        if (_this2.schedule) {\n          console.log('Calling updateScheduleDerived...');\n          _this2.updateScheduleDerived(_this2.now);\n        } else {\n          console.log('No schedule data, skipping updateScheduleDerived');\n        }\n      }\n    })();\n  }\n  loadDuty() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      _this3.loading.duty = true;\n      _this3.source.duty = 'unknown';\n      try {\n        const d = yield _this3.api.getDuty(_this3.schoolId);\n        if (d) {\n          _this3.duty = d;\n          _this3.source.duty = 'live';\n        } else _this3.source.duty = 'cache';\n      } catch (e) {\n        _this3.source.duty = 'cache';\n      } finally {\n        _this3.loading.duty = false;\n        _this3.lastUpdated = new Date();\n      }\n    })();\n  }\n  loadAnnouncements() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.loading.announcements = true;\n      _this4.source.announcements = 'unknown';\n      try {\n        const a = yield _this4.api.getAnnouncements();\n        _this4.announcements = a || [];\n        _this4.source.announcements = 'live';\n        // compute active announcements based on schedule and simulated/real time\n        _this4.computeActiveAnnouncements();\n        _this4.startAnnouncementCarousel();\n      } catch (e) {\n        _this4.source.announcements = 'cache';\n      } finally {\n        _this4.loading.announcements = false;\n        _this4.lastUpdated = new Date();\n      }\n    })();\n  }\n  loadStudents() {\n    return _asyncToGenerator(function* () {})();\n  } // Removed - not needed for performance\n  // this.loading.students = true; this.source.students = 'unknown';\n  // try{\n  //   const students = await this.api.getStudents(this.schoolId) || [];\n  //   this.birthdays = (students || []).filter(s=>{\n  //     try{ const d=new Date(s.birthday); const today=new Date(); return d.getDate()===today.getDate() && d.getMonth()===today.getMonth(); }catch(e){return false}\n  //   });\n  //   this.source.students = 'live';\n  // }catch(e){ this.source.students = 'cache'; }\n  // finally{ this.loading.students = false; this.lastUpdated = new Date(); }\n  loadSchool() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.loading.school = true;\n      _this5.source.school = 'unknown';\n      try {\n        const s = yield _this5.api.getSchool(_this5.schoolId);\n        if (s) {\n          _this5.school = s;\n          _this5.source.school = 'live';\n        } else _this5.source.school = 'cache';\n      } catch (e) {\n        _this5.source.school = 'cache';\n      } finally {\n        _this5.loading.school = false;\n      }\n    })();\n  }\n  enterFullscreen() {\n    return _asyncToGenerator(function* () {\n      try {\n        const el = document.documentElement;\n        if (el.requestFullscreen) yield el.requestFullscreen();else if (el.webkitRequestFullscreen) el.webkitRequestFullscreen();\n      } catch (e) {\n        console.debug('Fullscreen failed', e);\n      }\n    })();\n  }\n  getCountdownTileClass() {\n    if (!this.schedule?.isActive || !this.schedule?.current) return '';\n    const periodType = this.schedule.current.period_type;\n    const remainingMinutes = this.schedule.remainingMinutes || 0;\n    const elapsedMinutes = this.schedule.elapsedMinutes || 0;\n    // Add pulse animation if less than 1 minute remaining OR less than 1 minute elapsed (start of period)\n    const shouldPulse = remainingMinutes < 1 || elapsedMinutes < 1;\n    let baseClass = '';\n    switch (periodType) {\n      case 'class':\n        baseClass = 'period-class';\n        break;\n      case 'break':\n        baseClass = 'period-break';\n        break;\n      case 'lunch':\n        baseClass = 'period-lunch';\n        break;\n      default:\n        return '';\n    }\n    return shouldPulse ? `${baseClass} pulse` : baseClass;\n  }\n  // Filter duty assignments based on current time and school schedule\n  getFilteredDuty() {\n    if (!this.duty || !this.school || !this.schedule?.lessons) return [];\n    const now = this.simActive && this.simulatedNow ? this.simulatedNow : new Date();\n    const currentTime = now.getHours() * 60 + now.getMinutes(); // minutes since midnight\n    const dayOfWeekNum = now.getDay();\n    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const currentDayOfWeek = dayNames[dayOfWeekNum];\n    // Get school times\n    const schoolStartTime = this.parseTimeToMinutes(this.school.start_time);\n    const lunchStartTime = this.parseTimeToMinutes(this.school.lunch_start_time);\n    const morningStartTime = schoolStartTime - 30; // 30 minutes before school start\n    // Find the last lesson end time for today\n    const todayLessons = this.schedule.lessons.filter(l => {\n      const lessonDate = new Date(l.date || now);\n      return lessonDate.toDateString() === now.toDateString();\n    });\n    let lastLessonEndTime = lunchStartTime; // fallback\n    if (todayLessons.length > 0) {\n      const endTimes = todayLessons.map(l => {\n        if (l.end_time) return this.parseTimeToMinutes(l.end_time);\n        if (l.start_time && l.duration_minutes) {\n          return this.parseTimeToMinutes(l.start_time) + Number(l.duration_minutes);\n        }\n        return 0;\n      }).filter(t => t > 0);\n      if (endTimes.length > 0) {\n        lastLessonEndTime = Math.max(...endTimes);\n      }\n    }\n    // Filter duty assignments: current day AND current time slot\n    const filtered = this.duty.filter(assignment => {\n      // First filter by current day\n      if (assignment.day_of_week !== currentDayOfWeek) return false;\n      const shift = assignment.shift; // 'morning' or 'afternoon'\n      if (shift === 'morning') {\n        // Morning shift: 30 minutes before school_start_time to lunch_start_time\n        return currentTime >= morningStartTime && currentTime <= lunchStartTime;\n      } else if (shift === 'afternoon') {\n        // Afternoon shift: lunch_start_time to last lesson end\n        return currentTime >= lunchStartTime && currentTime <= lastLessonEndTime;\n      }\n      return false;\n    });\n    // Group by location and shift\n    const groups = {};\n    filtered.forEach(assignment => {\n      let locationName = 'Yönetim';\n      let shiftName = assignment.shift === 'morning' ? 'Sabah' : 'Öğleden Sonra';\n      if (assignment.duty_location) {\n        locationName = `${assignment.duty_location.name} (${shiftName})`;\n      } else {\n        // Administrators don't have duty locations\n        locationName = `Yönetim (${shiftName})`;\n      }\n      if (!groups[locationName]) {\n        groups[locationName] = [];\n      }\n      groups[locationName].push(assignment);\n    });\n    // Convert to array and sort groups by location order\n    const result = Object.keys(groups).map(locationName => ({\n      location: locationName,\n      assignments: groups[locationName].sort((a, b) => {\n        // Within each group, sort by administrator status, then vice principal status\n        const aIsAdministrator = !a.duty_location;\n        const bIsAdministrator = !b.duty_location;\n        const aIsVicePrincipal = a.employee?.employee_type?.is_vice_principal || false;\n        const bIsVicePrincipal = b.employee?.employee_type?.is_vice_principal || false;\n        // Administrators first\n        if (aIsAdministrator && !bIsAdministrator) return -1;\n        if (!aIsAdministrator && bIsAdministrator) return 1;\n        // Then vice principals\n        if (aIsVicePrincipal && !bIsVicePrincipal) return -1;\n        if (!aIsVicePrincipal && bIsVicePrincipal) return 1;\n        // Then by duty location order if they have locations\n        if (a.duty_location && b.duty_location) {\n          return (a.duty_location.order || 0) - (b.duty_location.order || 0);\n        }\n        return 0;\n      })\n    }));\n    // Sort groups: put Yönetim groups first, then sort by location order\n    return result.sort((a, b) => {\n      const aIsManagement = a.location.includes('Yönetim');\n      const bIsManagement = b.location.includes('Yönetim');\n      if (aIsManagement && !bIsManagement) return -1;\n      if (!aIsManagement && bIsManagement) return 1;\n      // For non-management groups, try to sort by location order\n      // Extract location order from assignments (assuming all assignments in group have same location)\n      const aOrder = a.assignments[0]?.duty_location?.order || 999;\n      const bOrder = b.assignments[0]?.duty_location?.order || 999;\n      return aOrder - bOrder;\n    });\n  }\n  // Helper to parse time string (HH:MM) to minutes since midnight\n  parseTimeToMinutes(timeStr) {\n    if (!timeStr) return 0;\n    const parts = timeStr.split(':');\n    if (parts.length >= 2) {\n      return parseInt(parts[0]) * 60 + parseInt(parts[1]);\n    }\n    return 0;\n  }\n  updateScheduleDerived(nowDate) {\n    console.log('updateScheduleDerived called with nowDate:', nowDate);\n    console.log('Current date/time info:');\n    console.log('- Full date:', nowDate.toISOString());\n    console.log('- Date string:', nowDate.toDateString());\n    console.log('- Time string:', nowDate.toTimeString());\n    console.log('- getDay() (JS):', nowDate.getDay(), '(0=Sun, 1=Mon, ..., 5=Fri, 6=Sat)');\n    console.log('- API day_of_week equivalent:', nowDate.getDay() === 0 ? 7 : nowDate.getDay(), '(1=Mon, ..., 7=Sun)');\n    if (!this.schedule || !Array.isArray(this.schedule.lessons)) {\n      console.log('No schedule or lessons array:', this.schedule);\n      return;\n    }\n    const lessons = this.schedule.lessons;\n    const currentDayOfWeek = nowDate.getDay() === 0 ? 7 : nowDate.getDay();\n    console.log('Processing', lessons.length, 'lessons for day_of_week =', currentDayOfWeek);\n    // Filter lessons for current day\n    const todayLessons = lessons.filter(l => {\n      if (typeof l.day_of_week !== 'undefined' && l.day_of_week !== null) {\n        return Number(l.day_of_week) === currentDayOfWeek;\n      }\n      return true; // No day_of_week field means include all\n    });\n    console.log('Found', todayLessons.length, 'lessons for today');\n    const today = new Date(nowDate.getFullYear(), nowDate.getMonth(), nowDate.getDate());\n    let active = null;\n    let next = null;\n    // First pass: find active period\n    for (const l of todayLessons) {\n      // Parse start and end times\n      let start = null;\n      let end = null;\n      let title = l.title || l.period_name || '';\n      if (l.start_time) {\n        const [hh, mm, ss] = String(l.start_time).split(':').map(x => parseInt(x, 10));\n        start = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hh || 0, mm || 0, ss || 0);\n      }\n      if (l.end_time) {\n        const [ehh, emm, ess] = String(l.end_time).split(':').map(x => parseInt(x, 10));\n        end = new Date(today.getFullYear(), today.getMonth(), today.getDate(), ehh || 0, emm || 0, ess || 0);\n      }\n      // If no end_time, calculate from duration_minutes\n      if (!end && l.duration_minutes && start) {\n        end = new Date(start.getTime() + Number(l.duration_minutes) * 60000);\n      }\n      // Title fallback\n      if (!title) {\n        if (l.period_type === 'class') title = l.period_name || 'Ders';else if (l.period_type) title = l.period_type.replace(/(^|_)([a-z])/g, (m, p, c) => c.toUpperCase());else title = 'Periyot';\n      }\n      // Legacy time range support\n      if (!start && !end && l.time) {\n        const parts = String(l.time).split('-').map(p => p.trim());\n        if (parts.length >= 2) {\n          start = this.parseTimeToDate(parts[0], today);\n          end = this.parseTimeToDate(parts[1], today);\n          if (!title) title = l.title || 'Ders';\n        }\n      }\n      // Skip if missing start or end time\n      if (!start || !end) {\n        console.log('Missing start or end time, skipping lesson:', l.period_name);\n        continue;\n      }\n      const timeRange = `${this.formatTime(start)} - ${this.formatTime(end)}`;\n      console.log('Checking lesson:', l.period_name, 'time range:', timeRange);\n      // Check if current time is within this period\n      if (nowDate >= start && nowDate <= end) {\n        console.log('Found active period:', l.period_name);\n        active = {\n          title: title || l.period_name || 'Ders',\n          start,\n          end,\n          timeRange,\n          period_type: l.period_type || (l.duration_minutes ? 'class' : undefined),\n          period_name: l.period_name\n        };\n        break; // Found active period, no need to continue first pass\n      }\n    }\n    // Second pass: find next period (only if we have lessons and no active period, or we want next even with active)\n    for (const l of todayLessons) {\n      // Parse start and end times (same logic as first pass)\n      let start = null;\n      let end = null;\n      let title = l.title || l.period_name || '';\n      if (l.start_time) {\n        const [hh, mm, ss] = String(l.start_time).split(':').map(x => parseInt(x, 10));\n        start = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hh || 0, mm || 0, ss || 0);\n      }\n      if (l.end_time) {\n        const [ehh, emm, ess] = String(l.end_time).split(':').map(x => parseInt(x, 10));\n        end = new Date(today.getFullYear(), today.getMonth(), today.getDate(), ehh || 0, emm || 0, ess || 0);\n      }\n      // If no end_time, calculate from duration_minutes\n      if (!end && l.duration_minutes && start) {\n        end = new Date(start.getTime() + Number(l.duration_minutes) * 60000);\n      }\n      // Title fallback\n      if (!title) {\n        if (l.period_type === 'class') title = l.period_name || 'Ders';else if (l.period_type) title = l.period_type.replace(/(^|_)([a-z])/g, (m, p, c) => c.toUpperCase());else title = 'Periyot';\n      }\n      // Legacy time range support\n      if (!start && !end && l.time) {\n        const parts = String(l.time).split('-').map(p => p.trim());\n        if (parts.length >= 2) {\n          start = this.parseTimeToDate(parts[0], today);\n          end = this.parseTimeToDate(parts[1], today);\n          if (!title) title = l.title || 'Ders';\n        }\n      }\n      // Skip if missing start or end time\n      if (!start || !end) {\n        continue;\n      }\n      // Check if this is the next upcoming period\n      if (nowDate < start && (!next || start < next.start)) {\n        next = {\n          title: title || l.period_name || 'Ders',\n          start,\n          end,\n          timeRange: `${this.formatTime(start)} - ${this.formatTime(end)}`,\n          period_type: l.period_type || (l.duration_minutes ? 'class' : undefined),\n          period_name: l.period_name\n        };\n      }\n    }\n    // Update schedule based on findings\n    if (active) {\n      const diffMs = active.end.getTime() - nowDate.getTime();\n      const totalMs = active.end.getTime() - active.start.getTime();\n      const mm = Math.floor(diffMs / 60000);\n      const ss = Math.floor(diffMs % 60000 / 1000);\n      const mmStr = String(mm).padStart(2, '0');\n      const ssStr = String(ss).padStart(2, '0');\n      this.schedule.current = active;\n      this.schedule.next = next; // Store next period info\n      this.schedule.isActive = true;\n      this.schedule.timeLeftText = `${mmStr} : ${ssStr}`;\n      this.schedule.remainingMinutes = mm + ss / 60; // Store remaining time in minutes\n      this.schedule.elapsedMinutes = (totalMs - diffMs) / 60000; // Store elapsed time in minutes\n      console.log('Active period set:', active.period_name, 'remaining:', this.schedule.timeLeftText, 'minutes:', this.schedule.remainingMinutes, 'elapsed:', this.schedule.elapsedMinutes);\n      // Check for class transition modal: if current is break, next is class, and less than 1 minute remaining\n      if (active.period_type === 'break' && next?.period_type === 'class' && this.schedule.remainingMinutes < 1) {\n        this.showClassTransitionModal = true;\n        this.classTransitionCountdown = this.formatTimeRemaining(diffMs);\n      } else {\n        this.showClassTransitionModal = false;\n        this.classTransitionCountdown = '';\n      }\n    } else if (next) {\n      const diffMs = next.start.getTime() - nowDate.getTime();\n      this.schedule.current = {\n        title: 'Sonraki: ' + (next.title || ''),\n        start: next.start,\n        end: next.end,\n        timeRange: next.timeRange,\n        period_name: next.period_name || next.title\n      };\n      this.schedule.next = null; // No next period when current is next\n      this.schedule.isActive = false;\n      this.schedule.timeLeftText = this.formatTimeRemaining(diffMs);\n      this.schedule.remainingMinutes = null; // No remaining time for upcoming periods\n      this.schedule.elapsedMinutes = null; // No elapsed time for upcoming periods\n      console.log('Next period set:', next.period_name, 'starts in:', this.schedule.timeLeftText);\n      // Hide modal when no active period\n      this.showClassTransitionModal = false;\n      this.classTransitionCountdown = '';\n    } else {\n      this.schedule.current = null;\n      this.schedule.next = null;\n      this.schedule.isActive = false;\n      this.schedule.timeLeftText = '-- : --';\n      this.schedule.remainingMinutes = null;\n      this.schedule.elapsedMinutes = null;\n      console.log('No active or upcoming periods found');\n      // Hide modal when no periods\n      this.showClassTransitionModal = false;\n      this.classTransitionCountdown = '';\n    }\n  }\n  formatTime(d) {\n    const hh = String(d.getHours()).padStart(2, '0');\n    const mm = String(d.getMinutes()).padStart(2, '0');\n    return `${hh}:${mm}`;\n  }\n  formatTimeRemaining(milliseconds) {\n    const totalMinutes = Math.floor(milliseconds / 60000);\n    // Eğer 24 saat (1440 dakika) ve üstü ise gün olarak göster\n    if (totalMinutes >= 1440) {\n      const days = Math.floor(totalMinutes / 1440);\n      return `${days} gün`;\n    }\n    // Normal format: gün saat dakika saniye (sıfır olanları gösterme)\n    const days = Math.floor(totalMinutes / 1440);\n    const hours = Math.floor(totalMinutes % 1440 / 60);\n    const minutes = Math.floor(totalMinutes % 60);\n    const seconds = Math.floor(milliseconds % 60000 / 1000);\n    const parts = [];\n    if (days > 0) parts.push(`${days} gün`);\n    if (hours > 0) parts.push(`${hours} saat`);\n    if (minutes > 0) parts.push(`${minutes} dakika`);\n    if (seconds > 0 && parts.length === 0) parts.push(`${seconds} saniye`); // Sadece saniye varsa göster\n    return parts.join(' ') || '0 saniye';\n  }\n  parseTimeToDate(t, base) {\n    try {\n      const m = t.match(/(\\d{1,2}):(\\d{2})/);\n      if (!m) return null;\n      const hh = parseInt(m[1]);\n      const mm = parseInt(m[2]);\n      return new Date(base.getFullYear(), base.getMonth(), base.getDate(), hh, mm, 0);\n    } catch (e) {\n      return null;\n    }\n  }\n  // compute which announcements are active at the provided now (uses this.now)\n  computeActiveAnnouncements() {\n    try {\n      const now = this.now || new Date();\n      const list = (this.announcements || []).filter(a => {\n        try {\n          // fields considered: start_date, expiration_date, publish_start_time, publish_end_time\n          // if no scheduling fields provided, treat as always active\n          if (a.start_date && a.expiration_date) {\n            const sd = new Date(a.start_date);\n            const ed = new Date(a.expiration_date);\n            if (now < sd || now > ed) return false;\n          }\n          if (a.publish_start_time && a.publish_end_time) {\n            // publish times may be in HH:MM format -> compare against today's times\n            const base = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            const ps = this.parseTimeToDate(String(a.publish_start_time), base);\n            const pe = this.parseTimeToDate(String(a.publish_end_time), base);\n            if (ps && pe) {\n              if (now < ps || now > pe) return false;\n            }\n          }\n          return true;\n        } catch (e) {\n          return true;\n        }\n      });\n      this.activeAnnouncements = list;\n      if (this.currentAnnouncementIndex >= this.activeAnnouncements.length) this.currentAnnouncementIndex = 0;\n    } catch (e) {\n      this.activeAnnouncements = this.announcements || [];\n    }\n  }\n  startAnnouncementCarousel() {\n    this.stopAnnouncementCarousel();\n    if (!this.activeAnnouncements || this.activeAnnouncements.length === 0) return;\n    const show = this.activeAnnouncements[this.currentAnnouncementIndex] || this.activeAnnouncements[0];\n    const duration = show && show.display_duration_ms ? Number(show.display_duration_ms) : 10000;\n    this.announcementTimerId = setTimeout(() => {\n      this.currentAnnouncementIndex = (this.currentAnnouncementIndex + 1) % (this.activeAnnouncements.length || 1);\n      this.computeActiveAnnouncements();\n      this.startAnnouncementCarousel();\n    }, duration);\n  }\n  stopAnnouncementCarousel() {\n    if (this.announcementTimerId) {\n      clearTimeout(this.announcementTimerId);\n      this.announcementTimerId = null;\n    }\n  }\n  // parse simulation time. Accepts ISO or '20 ekim 2025 09:25' (Turkish month names), or '20 ekim pazartesi 09:25'\n  parseSimTime(s) {\n    if (!s) return null;\n    // try ISO first\n    const iso = Date.parse(s);\n    if (!isNaN(iso)) return new Date(iso);\n    // normalize and try to parse Turkish month names\n    const months = {\n      'ocak': 0,\n      'şubat': 1,\n      'subat': 1,\n      'mart': 2,\n      'nisan': 3,\n      'mayıs': 4,\n      'mayis': 4,\n      'haziran': 5,\n      'temmuz': 6,\n      'ağustos': 7,\n      'agustos': 7,\n      'eylül': 8,\n      'eylul': 8,\n      'ekim': 9,\n      'kasım': 10,\n      'kasim': 10,\n      'aralık': 11,\n      'aralik': 11\n    };\n    // remove weekday words and commas\n    let t = s.toLowerCase().replace(/[,]/g, ' ').replace(/\\b(pazartesi|salı|sali|çarşamba|carsamba|perşembe|persembe|cuma|cumartesi|pazar)\\b/g, '');\n    t = t.replace(/\\s+/g, ' ').trim();\n    // expected patterns: '20 ekim 2025 09:25' or '20 ekim 09:25' (assume current year)\n    const parts = t.split(' ');\n    if (parts.length >= 2) {\n      // find day\n      const day = parseInt(parts[0]);\n      // find month token in parts\n      let monthIdx = -1;\n      let monthNum = -1;\n      let year = new Date().getFullYear();\n      let timePart = '00:00';\n      for (let i = 1; i < parts.length; i++) {\n        const p = parts[i];\n        if (months[p] !== undefined) {\n          monthIdx = i;\n          monthNum = months[p];\n        }\n      }\n      if (monthIdx === -1) return null;\n      // year might be the token after month\n      if (parts.length > monthIdx + 1 && /^\\d{4}$/.test(parts[monthIdx + 1])) year = parseInt(parts[monthIdx + 1]);\n      // time may be at the end\n      const last = parts[parts.length - 1];\n      if (/^\\d{1,2}:\\d{2}$/.test(last)) timePart = last;\n      const [hh, mm] = timePart.split(':').map(x => parseInt(x) || 0);\n      if (!day || monthNum < 0) return null;\n      return new Date(year, monthNum, day, hh, mm, 0);\n    }\n    return null;\n  }\n};\nKioskComponent = __decorate([Component({\n  selector: 'app-kiosk',\n  template: `\n  <div class=\"kiosk-root\">\n    <div class=\"top-tiles\">\n      <div class=\"tile tile-school\">\n        <div class=\"period-school\">\n          <img *ngIf=\"school?.logoUrl\" [src]=\"school.logoUrl\" alt=\"logo\" class=\"period-school-logo\" />\n          <div class=\"period-school-name\">{{ school?.name || 'Okulum' }}</div>\n        </div>\n      </div>\n      <div class=\"tile tile-countdown\" [ngClass]=\"getCountdownTileClass()\">\n        <div class=\"countdown-lesson\">\n          <ng-container *ngIf=\"schedule?.isActive\">\n            Şu anda {{ schedule?.current?.period_name || '—' }} teyiz\n          </ng-container>\n          <ng-container *ngIf=\"!schedule?.isActive && schedule?.current\">\n            sıradaki {{ schedule?.current?.period_name || '—' }}\n          </ng-container>\n          <ng-container *ngIf=\"!schedule?.isActive && !schedule?.current\">\n            Ders yok\n          </ng-container>\n        </div>\n        <div class=\"countdown-next\" *ngIf=\"schedule?.next\">\n          sıradaki {{ schedule?.next?.period_name || '—' }} \n          <span class=\"countdown-next-time\" *ngIf=\"schedule?.next?.start\">({{ formatTime(schedule?.next?.start) }})</span>\n        </div>\n        <div class=\"countdown-clock\">{{ schedule?.timeLeftText || '-- : --' }}</div>\n      </div>\n      <div class=\"tile tile-date\">\n          <div class=\"date-day\">{{ todayText }}</div>\n        <div class=\"date-time\">{{ nowText }}</div>\n      </div>\n    </div>\n\n    <div class=\"content-grid\">\n      <aside class=\"left-col\">\n\n        <div class=\"card duty-card\" *ngIf=\"getFilteredDuty().length > 0\">\n          <div class=\"card-title\">Şu Anki Nöbetçi</div>\n          <div *ngFor=\"let group of getFilteredDuty()\" class=\"duty-group\">\n            <div class=\"duty-group-header\">{{ group.location }}</div>\n            <ul class=\"duty-list\">\n              <li *ngFor=\"let assignment of group.assignments\" \n                  [ngClass]=\"{\n                    'administrator': !assignment.duty_location,\n                    'vice-principal': assignment.employee?.employee_type?.is_vice_principal && assignment.duty_location\n                  }\">\n                <span class=\"guard-name\">{{ assignment.employee?.name || '—' }}</span> \n                <span class=\"vice-principal-badge\" *ngIf=\"assignment.employee?.employee_type?.is_vice_principal\">• Müdür Yardımcısı</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n<!--birth days -->  \n      <div class=\"card birthdays-card\" *ngIf=\"birthdays.length > 0\">\n          <div class=\"card-title\">Doğum Günü Olanlar</div>\n          <ul class=\"birthday-list\">\n            <li *ngFor=\"let birthday of birthdays\">\n              <span class=\"birthday-name\">{{ birthday.name }}</span>\n              <span class=\"birthday-date\">{{ birthday.date | date:'dd MMMM' }}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      </aside>\n\n      <main class=\"main-col\">\n        <div class=\"card main-card\">\n          <div class=\"announce-area\">\n            <div *ngIf=\"announcements.length===0\" class=\"announce-empty\">Duyuru yok</div>\n            <div *ngFor=\"let a of announcements\" class=\"announce-item\">\n              <h2 [innerText]=\"a.title\"></h2>\n              <div class=\"announce-text\" [innerHTML]=\"a.message\"></div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n\n    <footer class=\"kiosk-footer\">\n      <div class=\"left\">Son güncelleme: {{ lastUpdated | date:'HH:mm:ss' }} <span *ngIf=\"simActive\" class=\"sim-badge\">Sim: {{ simulatedNow | date:'dd MMM yyyy HH:mm' }}</span></div>\n      <div class=\"right\">\n        <button class=\"fs-btn\" (click)=\"enterFullscreen()\">Tam Ekran</button>\n      </div>\n    </footer>\n\n    <!-- Modal for class transition warning -->\n    <div class=\"modal-overlay\" *ngIf=\"showClassTransitionModal\">\n      <div class=\"modal-content\">\n        <div class=\"modal-icon\">🔔</div>\n        <h2>Ders Başlıyor! İyi Dersler.</h2>\n        <p>Dersin başlamasına {{ classTransitionCountdown }} kaldı</p>\n        <p class=\"modal-subtitle\">Lütfen sınıflarınıza geçiniz</p>\n      </div>\n    </div>\n  </div>\n  `,\n  styles: [`:host { display:block; height:100vh; font-family: 'Segoe UI', Roboto, Arial, sans-serif }\n  .kiosk-root { display:flex; flex-direction:column; position:fixed; top:0; left:0; width:100vw; height:100vh; background:#2f3234; color:#111; z-index:1; padding-bottom:50px; }\n\n  .top-tiles{display:grid; grid-template-columns: 1fr 1fr 1fr; gap:10px; padding:10px}\n  .tile{border-radius:12px; padding:18px; color:#fff; display:flex; flex-direction:column; justify-content:center; width:100%; box-sizing:border-box;}\n  .tile-school{background:#d94a4a}\n  .tile-school.period-class{background:#d94a4a}\n  .tile-school.period-break{background:#4caf50}\n  .tile-school.period-lunch{background:#f0a23a}\n  .tile-countdown{background:#3aa0e6; align-items:center;}\n  .tile-countdown.period-class{background:#d94a4a;}\n  .tile-countdown.period-break{background:#4caf50;}\n  .tile-countdown.period-lunch{background:#f0a23a;}\n  .tile-countdown.period-class.pulse{background:#d94a4a; animation: pulse-red 1.5s infinite;}\n  .tile-countdown.period-break.pulse{background:#4caf50; animation: pulse-green 1.5s infinite;}\n  .tile-countdown.period-lunch.pulse{background:#f0a23a; animation: pulse-orange 1.5s infinite;}\n  @keyframes pulse-red { \n    0%, 100% { background-color: #d94a4a; } \n    25% { background-color: #e55a5a; } \n    50% { background-color: #ff6b6b; } \n    75% { background-color: #e55a5a; } \n  }\n  @keyframes pulse-green { \n    0%, 100% { background-color: #4caf50; } \n    25% { background-color: #66bb6a; } \n    50% { background-color: #81c784; } \n    75% { background-color: #66bb6a; } \n  }\n  @keyframes pulse-orange { \n    0%, 100% { background-color: #f0a23a; } \n    25% { background-color: #fb8c00; } \n    50% { background-color: #ffb74d; } \n    75% { background-color: #fb8c00; } \n  }\n  /* Date tile: increase contrast and font sizes for readability */\n  .tile-date{background: linear-gradient(180deg,#ffd54f,#f0a23a); align-items:center; justify-content:center; text-align:center; color:#111; box-shadow: inset 0 -2px 6px rgba(0,0,0,0.06);}\n  .period-day{font-size:16px; opacity:0.95; margin-bottom:6px; color:#fff}\n  .period-label{font-size:28px; font-weight:700}\n  .period-school{display:flex; align-items:center; justify-content:center; gap:12px; margin:0; height:90%; width:100%;}\n  .period-school-logo{  width:50%; object-fit:contain; border-radius:6px; background:#fff; padding:6px}\n  .period-school-name{font-size:24px; font-weight:800; color:#fff}\n  .period-time{font-size:20px; opacity:0.95}\n  .countdown-lesson{font-size:20px; font-weight:700; margin:6px 0; color:#fff}\n  .countdown-next{font-size:16px; font-weight:500; margin:4px 0; color:#ffe; opacity:0.9}\n  .countdown-next-time{font-size:14px; opacity:0.8; margin-left:4px}\n  .countdown-period-name{font-size:16px; font-weight:500; color:#ffe}\n  .countdown-title{font-size:14px}\n  .countdown-clock{font-size:42px; font-weight:700}\n  .date-day{font-size:34px; font-weight:700; line-height:1; color:#111}\n  .date-time{font-size:40px; font-weight:700; opacity:0.95; color:#111}\n\n  .content-grid{display:grid; grid-template-columns: 1fr; gap:10px; padding:0 10px 10px; height:calc(100vh - 120px);}\n  .left-col{display:flex; flex-direction:column; gap:10px}\n  .school-card{background:#fff; border-radius:12px; padding:12px; display:flex; align-items:center; gap:12px}\n  .school-logo{height:56px; width:56px; object-fit:contain}\n  .school-name{font-weight:700; color:#222}\n\n  .card{background:#fff; border-radius:12px; padding:12px; box-shadow: 0 4px 10px rgba(0,0,0,0.08); width:100%; box-sizing:border-box;}\n  .card-title{font-weight:700; padding:8px 4px; color:#333}\n  .duty-card ul, .birthdays-card ul{list-style:none;padding:0;margin:0}\n  .duty-card li{padding:8px 6px;border-bottom:1px solid #eee}\n  .duty-group{margin-bottom:5px;}\n  .duty-group:last-child{margin-bottom:0;}\n  .duty-group-header{font-weight:700; font-size:16px; color:#1976d2; margin-bottom:4px; padding:6px 8px; background:#f5f5f5; border-radius:6px; border-left:4px solid #1976d2;}\n  .duty-list{margin:0; padding:0;}\n  .duty-list li:last-child{border-bottom:none;}\n  .guard-name{font-weight:600}\n  .duty-shift{font-size:12px; color:#666; margin-left:4px}\n  .administrator{background:#e8f5e8 !important; border-left:4px solid #4caf50 !important; padding-left:12px !important;}\n  .administrator .guard-name{color:#2e7d32; font-weight:700;}\n  .vice-principal{background:#fff3cd !important; border-left:4px solid #ffc107 !important; padding-left:12px !important;}\n  .vice-principal .guard-name{color:#856404; font-weight:700;}\n  .vice-principal-badge{color:#856404; font-weight:600; font-size:14px; margin-left:4px;}\n  .administrator-badge{color:#2e7d32; font-weight:600; font-size:14px; margin-left:4px;}\n  .duty-info{color:#666;}\n  .main-col{display:flex}\n  .main-card{height:100%; min-height:320px; display:flex; align-items:center; justify-content:center; overflow:hidden}\n  .announce-area{width:100%; padding:24px; text-align:center}\n  .announce-item h2{font-size:48px; margin:8px 0}\n  .announce-text{font-size:20px; color:#444}\n\n  .kiosk-footer{display:flex; justify-content:space-between; align-items:center; padding:0 10px 10px; font-size:13px; background:rgba(0,0,0,.04); color:#222; position:fixed; bottom:0; left:0; right:0; width:100vw; z-index:1000;}\n  .fs-btn{background:rgba(0,0,0,0.06);border:0;padding:8px 12px;color:#222;border-radius:6px}\n  .empty{opacity:0.6}\n  @media (max-width:1100px){ .top-tiles{grid-template-columns:1fr 1fr 1fr} .content-grid{grid-template-columns:1fr} }\n\n  /* Modal styles */\n  .modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: rgba(0, 0, 0, 0.8);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 2000;\n    animation: modal-fade-in 0.3s ease-out;\n  }\n\n  .modal-content {\n    background: #fff;\n    border-radius: 30px;\n    padding: 60px;\n    text-align: center;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);\n    max-width: 800px;\n    width: 95%;\n    animation: modal-slide-up 0.4s ease-out;\n  }\n\n  .modal-icon {\n    font-size: 120px;\n    margin-bottom: 30px;\n    animation: bell-ring 1s ease-in-out infinite;\n  }\n\n  .modal-content h2 {\n    color: #d94a4a;\n    font-size: 48px;\n    font-weight: 700;\n    margin: 0 0 20px 0;\n  }\n\n  .modal-content p {\n    font-size: 32px;\n    color: #333;\n    margin: 15px 0;\n    font-weight: 600;\n  }\n\n  .modal-subtitle {\n    font-size: 24px !important;\n    color: #666 !important;\n    font-weight: 400 !important;\n  }\n\n  @keyframes modal-fade-in {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  @keyframes modal-slide-up {\n    from { transform: translateY(50px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n\n  @keyframes bell-ring {\n    0%, 100% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    75% { transform: rotate(-5deg); }\n  }\n    `]\n})], KioskComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}